const axios = require('axios');

// Configura√ß√£o da API
const API_URL = 'http://localhost:3004';

// Fun√ß√£o para buscar usu√°rio por email
async function buscarUsuarioPorEmail(email) {
    try {
        console.log(`üîç Buscando usu√°rio com email: ${email}`);
        
        // Primeiro, vamos buscar todos os usu√°rios para encontrar o email
        const response = await axios.get(`${API_URL}/usuarios`);
        
        const usuario = response.data.find(user => user.email === email);
        
        if (usuario) {
            console.log('‚úÖ Usu√°rio encontrado!');
            console.log(`üìã ID: ${usuario.id_usuario}`);
            console.log(`üìã Nome: ${usuario.nome}`);
            console.log(`üìã Email: ${usuario.email}`);
            return usuario;
        } else {
            console.log('‚ùå Usu√°rio n√£o encontrado!');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Erro ao buscar usu√°rio:', error.response?.data || error.message);
        throw error;
    }
}

// Fun√ß√£o para buscar fornecedores dispon√≠veis
async function buscarFornecedores() {
    try {
        console.log('üîç Buscando fornecedores dispon√≠veis...');
        
        const response = await axios.get(`${API_URL}/fornecedores`);
        
        console.log(`‚úÖ Encontrados ${response.data.length} fornecedores`);
        return response.data;
    } catch (error) {
        console.error('‚ùå Erro ao buscar fornecedores:', error.response?.data || error.message);
        throw error;
    }
}

// Fun√ß√£o para criar um servi√ßo
async function criarServico(dadosServico) {
    try {
        console.log(`üîÑ Criando servi√ßo: ${dadosServico.categoria}`);
        
        const response = await axios.post(`${API_URL}/servicos`, dadosServico);
        
        console.log('‚úÖ Servi√ßo criado com sucesso!');
        console.log(`üìã ID do servi√ßo: ${response.data.id_servico}`);
        console.log(`üìã Status: ${response.data.status}`);
        
        return response.data;
    } catch (error) {
        console.error('‚ùå Erro ao criar servi√ßo:', error.response?.data || error.message);
        throw error;
    }
}

// Fun√ß√£o para criar servi√ßos de teste
async function criarServicosTeste(emailUsuario) {
    try {
        console.log('üöÄ Criando Servi√ßos de Teste para Agenda');
        console.log('========================================\n');
        
        // 1. Buscar usu√°rio
        const usuario = await buscarUsuarioPorEmail(emailUsuario);
        if (!usuario) {
            console.log('‚ùå N√£o foi poss√≠vel continuar sem encontrar o usu√°rio');
            return;
        }
        
        // 2. Buscar fornecedores
        const fornecedores = await buscarFornecedores();
        if (!fornecedores || fornecedores.length === 0) {
            console.log('‚ùå N√£o foi poss√≠vel continuar sem fornecedores');
            return;
        }
        
        console.log('\nüìÖ Criando servi√ßos com diferentes status...\n');
        
        // Servi√ßos de teste com diferentes status
        const servicosTeste = [
            {
                categoria: 'Limpeza',
                descricao: 'Limpeza completa da casa - 3 quartos, sala, cozinha e banheiros',
                status: 'pendente',
                valor: 150.00,
                data: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 dias a partir de hoje
                horario: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 9 * 60 * 60 * 1000), // 9h da manh√£
                fornecedor: fornecedores[0]
            },
            {
                categoria: 'Jardinagem',
                descricao: 'Poda de √°rvores e manuten√ß√£o do jardim',
                status: 'confirmado',
                valor: 200.00,
                data: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 dias a partir de hoje
                horario: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000 + 14 * 60 * 60 * 1000), // 14h da tarde
                fornecedor: fornecedores[1] || fornecedores[0]
            },
            {
                categoria: 'Encanamento',
                descricao: 'Reparo no encanamento da cozinha - vazamento na pia',
                status: 'Em Andamento',
                valor: 120.00,
                data: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // 1 dia a partir de hoje
                horario: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000 + 10 * 60 * 60 * 1000), // 10h da manh√£
                fornecedor: fornecedores[2] || fornecedores[0]
            },
            {
                categoria: 'El√©trica',
                descricao: 'Instala√ß√£o de novos pontos de luz na sala',
                status: 'Aguardando pagamento',
                valor: 180.00,
                data: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 dia atr√°s
                horario: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000 + 15 * 60 * 60 * 1000), // 15h da tarde
                fornecedor: fornecedores[3] || fornecedores[0]
            },
            {
                categoria: 'Carpintaria',
                descricao: 'Fabrica√ß√£o de uma mesa de jantar personalizada',
                status: 'concluido',
                valor: 450.00,
                data: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 dias atr√°s
                horario: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000 + 11 * 60 * 60 * 1000), // 11h da manh√£
                fornecedor: fornecedores[4] || fornecedores[0]
            },
            {
                categoria: 'Pintura',
                descricao: 'Pintura das paredes do quarto principal',
                status: 'negociar valor',
                valor: 0, // A combinar
                data: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000), // 4 dias a partir de hoje
                horario: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000 + 13 * 60 * 60 * 1000), // 13h da tarde
                fornecedor: fornecedores[5] || fornecedores[0]
            }
        ];
        
        const servicosCriados = [];
        
        // Criar cada servi√ßo
        for (const servicoTeste of servicosTeste) {
            try {
                const dadosServico = {
                    id_usuario: usuario.id_usuario,
                    id_fornecedor: servicoTeste.fornecedor.id_fornecedor,
                    categoria: servicoTeste.categoria,
                    data: servicoTeste.data.toISOString(),
                    horario: servicoTeste.horario.toISOString(),
                    status: servicoTeste.status,
                    valor: servicoTeste.valor,
                    descricao: servicoTeste.descricao
                };
                
                const servicoCriado = await criarServico(dadosServico);
                servicosCriados.push(servicoCriado);
                
                console.log(`‚úÖ ${servicoTeste.categoria} - ${servicoTeste.status}\n`);
                
            } catch (error) {
                console.log(`‚ùå Erro ao criar servi√ßo ${servicoTeste.categoria}:`, error.message);
            }
        }
        
        console.log('üéâ Servi√ßos de teste criados com sucesso!');
        console.log(`üìä Total criado: ${servicosCriados.length} servi√ßos`);
        
        // Mostrar resumo
        console.log('\nüìã Resumo dos Servi√ßos Criados:');
        servicosCriados.forEach((servico, index) => {
            console.log(`${index + 1}. ${servico.categoria} - ${servico.status} - R$ ${servico.valor || 'A combinar'}`);
        });
        
        console.log('\nüí° Agora voc√™ pode testar a agenda no mobile ou web!');
        console.log('üîç Para ver os servi√ßos, use: node buscar-servico.js historico ' + usuario.id_usuario);
        
        return servicosCriados;
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error.message);
    }
}

// Fun√ß√£o principal
async function main() {
    const args = process.argv.slice(2);
    const email = args[0] || 'joaoif.eletro@gmail.com';
    
    await criarServicosTeste(email);
}

// Executar se for chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    criarServicosTeste,
    buscarUsuarioPorEmail,
    buscarFornecedores
}; 