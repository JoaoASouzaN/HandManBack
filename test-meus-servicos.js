const axios = require('axios');
const jwt = require('jsonwebtoken');

// Configura√ß√£o da API
const API_URL = 'http://localhost:3004';

// Fun√ß√£o para testar a rota de meus servi√ßos
async function testarMeusServicos(idUsuario) {
    try {
        console.log(`üîç Testando rota de meus servi√ßos para usu√°rio: ${idUsuario}`);
        
        const response = await axios.get(`${API_URL}/usuarios/historico/${idUsuario}`);

        console.log('‚úÖ Rota funcionando!');
        console.log(`üìã Total de servi√ßos: ${response.data.length}`);
        
        if (response.data.length > 0) {
            console.log('\nüìã Servi√ßos encontrados:');
            response.data.forEach((servico, index) => {
                console.log(`\n--- Servi√ßo ${index + 1} ---`);
                console.log(`ID: ${servico.id_servico}`);
                console.log(`Status: ${servico.status}`);
                console.log(`Categoria: ${servico.categoria}`);
                console.log(`Data: ${new Date(servico.data).toLocaleDateString()}`);
                console.log(`Valor: R$ ${servico.valor || 'A combinar'}`);
                if (servico.fornecedor) {
                    console.log(`Fornecedor: ${servico.fornecedor.nome}`);
                }
            });
        } else {
            console.log('üìù Nenhum servi√ßo encontrado para este usu√°rio');
        }
        
        return response.data;
    } catch (error) {
        if (error.response?.status === 404) {
            console.error('‚ùå Usu√°rio n√£o encontrado ou sem hist√≥rico!');
        } else {
            console.error('‚ùå Erro ao buscar servi√ßos:', error.response?.data || error.message);
        }
        throw error;
    }
}

// Fun√ß√£o para testar a rota antiga (que n√£o deveria funcionar)
async function testarRotaAntiga(idUsuario) {
    try {
        console.log(`üîç Testando rota antiga (que n√£o deveria funcionar): ${idUsuario}`);
        
        const response = await axios.get(`${API_URL}/servicos/usuario/${idUsuario}`);
        console.log('‚ùå Rota antiga ainda funciona (n√£o deveria)');
        return response.data;
    } catch (error) {
        if (error.response?.status === 404) {
            console.log('‚úÖ Rota antiga corretamente retorna 404 (esperado)');
        } else {
            console.error('‚ùå Erro inesperado na rota antiga:', error.response?.data || error.message);
        }
        throw error;
    }
}

// Fun√ß√£o para testar se o usu√°rio existe
async function testarUsuarioExiste(idUsuario) {
    try {
        console.log(`üîç Testando se usu√°rio existe: ${idUsuario}`);
        
        const response = await axios.get(`${API_URL}/usuarios/buscar-id/${idUsuario}`);

        console.log('‚úÖ Usu√°rio encontrado!');
        console.log('üìã Dados do usu√°rio:', response.data);
        
        return response.data;
    } catch (error) {
        if (error.response?.status === 404) {
            console.error('‚ùå Usu√°rio n√£o encontrado!');
        } else {
            console.error('‚ùå Erro ao buscar usu√°rio:', error.response?.data || error.message);
        }
        throw error;
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        // Testar com um ID de usu√°rio v√°lido
        const idUsuario = 'usuario001'; // Substitua por um ID v√°lido se necess√°rio
        
        console.log('=== TESTE DA ROTA MEUS SERVI√áOS ===\n');
        
        // Primeiro testar se o usu√°rio existe
        console.log('1. Verificando se usu√°rio existe...');
        await testarUsuarioExiste(idUsuario);
        
        console.log('\n2. Testando rota de hist√≥rico...');
        // Testar rota correta
        await testarMeusServicos(idUsuario);
        
        console.log('\n=== TESTE DA ROTA ANTIGA ===\n');
        
        // Testar rota antiga (deveria falhar)
        try {
            await testarRotaAntiga(idUsuario);
        } catch (error) {
            // Esperado que falhe
        }
        
        console.log('\n=== TESTE CONCLU√çDO ===');
        console.log('‚úÖ A corre√ß√£o da rota est√° funcionando corretamente!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }
}

// Executar se for chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    testarMeusServicos,
    testarRotaAntiga
}; 