const axios = require('axios');

// Configura√ß√£o da API
const API_URL = 'http://localhost:3004';

// Fun√ß√£o para buscar um servi√ßo espec√≠fico
async function buscarServico(idServico) {
    try {
        console.log(`üîç Buscando servi√ßo: ${idServico}`);
        
        const response = await axios.get(`${API_URL}/servicos/${idServico}`);

        console.log('‚úÖ Servi√ßo encontrado!');
        console.log('üìã Dados do servi√ßo:');
        console.log(JSON.stringify(response.data, null, 2));
        
        return response.data;
    } catch (error) {
        if (error.response?.status === 404) {
            console.error('‚ùå Servi√ßo n√£o encontrado!');
        } else {
            console.error('‚ùå Erro ao buscar servi√ßo:', error.response?.data || error.message);
        }
        throw error;
    }
}

// Fun√ß√£o para buscar hist√≥rico de servi√ßos de um usu√°rio
async function buscarHistoricoUsuario(idUsuario) {
    try {
        console.log(`üîç Buscando hist√≥rico do usu√°rio: ${idUsuario}`);
        
        const response = await axios.get(`${API_URL}/usuarios/historico/${idUsuario}`);

        console.log('‚úÖ Hist√≥rico encontrado!');
        console.log(`üìã Total de servi√ßos: ${response.data.length}`);
        
        response.data.forEach((servico, index) => {
            console.log(`\n--- Servi√ßo ${index + 1} ---`);
            console.log(`ID: ${servico.id_servico}`);
            console.log(`Status: ${servico.status}`);
            console.log(`Categoria: ${servico.categoria}`);
            console.log(`Data: ${new Date(servico.data).toLocaleDateString()}`);
            console.log(`Valor: R$ ${servico.valor || 'A combinar'}`);
            if (servico.fornecedor) {
                console.log(`Fornecedor: ${servico.fornecedor.nome}`);
            }
        });
        
        return response.data;
    } catch (error) {
        if (error.response?.status === 404) {
            console.error('‚ùå Usu√°rio n√£o encontrado ou sem hist√≥rico!');
        } else {
            console.error('‚ùå Erro ao buscar hist√≥rico:', error.response?.data || error.message);
        }
        throw error;
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üîç Script para Buscar Servi√ßos');
    console.log('==============================\n');
    
    // Verificar argumentos da linha de comando
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log('‚ùå Uso: node buscar-servico.js <tipo> <id>');
        console.log('\nüìã Tipos dispon√≠veis:');
        console.log('   - servico <id_servico>  - Buscar um servi√ßo espec√≠fico');
        console.log('   - historico <id_usuario> - Buscar hist√≥rico de um usu√°rio');
        console.log('\nüí° Exemplos:');
        console.log('   node buscar-servico.js servico abc123');
        console.log('   node buscar-servico.js historico user456');
        return;
    }
    
    const [tipo, id] = args;
    
    try {
        if (tipo === 'servico') {
            await buscarServico(id);
        } else if (tipo === 'historico') {
            await buscarHistoricoUsuario(id);
        } else {
            console.log('‚ùå Tipo inv√°lido! Use "servico" ou "historico"');
        }
    } catch (error) {
        console.log('\nüí° Dicas:');
        console.log('   - Verifique se o backend est√° rodando na porta 3004');
        console.log('   - Verifique se o ID est√° correto');
        console.log('   - Para servi√ßos, use o ID completo do servi√ßo');
        console.log('   - Para hist√≥rico, use o ID do usu√°rio');
    }
}

// Executar se for chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    buscarServico,
    buscarHistoricoUsuario
}; 